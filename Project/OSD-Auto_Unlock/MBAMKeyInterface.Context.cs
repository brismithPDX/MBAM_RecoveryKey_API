//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OSD_Auto_Unlock
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MBAM_Recovery_and_HardwareEntities : DbContext
    {
        public MBAM_Recovery_and_HardwareEntities()
            : base("name=MBAM_Recovery_and_HardwareEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int GetVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVersion");
        }
    
        public virtual int GetExemptionStatus(string model, string manufacturer, string tpmMake, string tpmVersion, string biosMake, string biosVersion, ObjectParameter exemptionId)
        {
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var tpmMakeParameter = tpmMake != null ?
                new ObjectParameter("TpmMake", tpmMake) :
                new ObjectParameter("TpmMake", typeof(string));
    
            var tpmVersionParameter = tpmVersion != null ?
                new ObjectParameter("TpmVersion", tpmVersion) :
                new ObjectParameter("TpmVersion", typeof(string));
    
            var biosMakeParameter = biosMake != null ?
                new ObjectParameter("BiosMake", biosMake) :
                new ObjectParameter("BiosMake", typeof(string));
    
            var biosVersionParameter = biosVersion != null ?
                new ObjectParameter("BiosVersion", biosVersion) :
                new ObjectParameter("BiosVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetExemptionStatus", modelParameter, manufacturerParameter, tpmMakeParameter, tpmVersionParameter, biosMakeParameter, biosVersionParameter, exemptionId);
        }
    
        public virtual ObjectResult<GetMachineTypeFromId_Result> GetMachineTypeFromId(Nullable<int> machineTypeId)
        {
            var machineTypeIdParameter = machineTypeId.HasValue ?
                new ObjectParameter("MachineTypeId", machineTypeId) :
                new ObjectParameter("MachineTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineTypeFromId_Result>("GetMachineTypeFromId", machineTypeIdParameter);
        }
    
        public virtual ObjectResult<GetMachineTypes_Result> GetMachineTypes(string model, string manufacturer, string tpmMake, string tpmVersion, string biosMake, string biosVersion, Nullable<int> exemptionId)
        {
            var modelParameter = model != null ?
                new ObjectParameter("Model", model) :
                new ObjectParameter("Model", typeof(string));
    
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var tpmMakeParameter = tpmMake != null ?
                new ObjectParameter("TpmMake", tpmMake) :
                new ObjectParameter("TpmMake", typeof(string));
    
            var tpmVersionParameter = tpmVersion != null ?
                new ObjectParameter("TpmVersion", tpmVersion) :
                new ObjectParameter("TpmVersion", typeof(string));
    
            var biosMakeParameter = biosMake != null ?
                new ObjectParameter("BiosMake", biosMake) :
                new ObjectParameter("BiosMake", typeof(string));
    
            var biosVersionParameter = biosVersion != null ?
                new ObjectParameter("BiosVersion", biosVersion) :
                new ObjectParameter("BiosVersion", typeof(string));
    
            var exemptionIdParameter = exemptionId.HasValue ?
                new ObjectParameter("ExemptionId", exemptionId) :
                new ObjectParameter("ExemptionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineTypes_Result>("GetMachineTypes", modelParameter, manufacturerParameter, tpmMakeParameter, tpmVersionParameter, biosMakeParameter, biosVersionParameter, exemptionIdParameter);
        }
    
        public virtual ObjectResult<GetMachineUsers_Result> GetMachineUsers(string machineName, string machineDomainName)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var machineDomainNameParameter = machineDomainName != null ?
                new ObjectParameter("MachineDomainName", machineDomainName) :
                new ObjectParameter("MachineDomainName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineUsers_Result>("GetMachineUsers", machineNameParameter, machineDomainNameParameter);
        }
    
        public virtual ObjectResult<GetRecoveryKey_Result> GetRecoveryKey(string recoveryKeyId, string reason)
        {
            var recoveryKeyIdParameter = recoveryKeyId != null ?
                new ObjectParameter("RecoveryKeyId", recoveryKeyId) :
                new ObjectParameter("RecoveryKeyId", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecoveryKey_Result>("GetRecoveryKey", recoveryKeyIdParameter, reasonParameter);
        }
    
        public virtual ObjectResult<GetRecoveryKeyForUser_Result> GetRecoveryKeyForUser(string recoveryKeyId, string userName, string userDomainName, string reason)
        {
            var recoveryKeyIdParameter = recoveryKeyId != null ?
                new ObjectParameter("RecoveryKeyId", recoveryKeyId) :
                new ObjectParameter("RecoveryKeyId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecoveryKeyForUser_Result>("GetRecoveryKeyForUser", recoveryKeyIdParameter, userNameParameter, userDomainNameParameter, reasonParameter);
        }
    
        public virtual ObjectResult<string> GetRecoveryKeyIds(string partialRecoveryKeyId, string reason)
        {
            var partialRecoveryKeyIdParameter = partialRecoveryKeyId != null ?
                new ObjectParameter("PartialRecoveryKeyId", partialRecoveryKeyId) :
                new ObjectParameter("PartialRecoveryKeyId", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRecoveryKeyIds", partialRecoveryKeyIdParameter, reasonParameter);
        }
    
        public virtual ObjectResult<string> GetRecoveryKeyIdsForUser(string partialRecoveryKeyId, string userName, string userDomainName, string reason)
        {
            var partialRecoveryKeyIdParameter = partialRecoveryKeyId != null ?
                new ObjectParameter("PartialRecoveryKeyId", partialRecoveryKeyId) :
                new ObjectParameter("PartialRecoveryKeyId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetRecoveryKeyIdsForUser", partialRecoveryKeyIdParameter, userNameParameter, userDomainNameParameter, reasonParameter);
        }
    
        public virtual int GetResetRequired(string volumeGuid, ObjectParameter requireReset)
        {
            var volumeGuidParameter = volumeGuid != null ?
                new ObjectParameter("VolumeGuid", volumeGuid) :
                new ObjectParameter("VolumeGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetResetRequired", volumeGuidParameter, requireReset);
        }
    
        public virtual ObjectResult<GetTpm_Result> GetTpm(string machineName, string machineDomainName, string reason)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var machineDomainNameParameter = machineDomainName != null ?
                new ObjectParameter("MachineDomainName", machineDomainName) :
                new ObjectParameter("MachineDomainName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTpm_Result>("GetTpm", machineNameParameter, machineDomainNameParameter, reasonParameter);
        }
    
        public virtual ObjectResult<GetTpmForUser_Result> GetTpmForUser(string machineName, string machineDomainName, string userName, string userDomainName, string reason)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var machineDomainNameParameter = machineDomainName != null ?
                new ObjectParameter("MachineDomainName", machineDomainName) :
                new ObjectParameter("MachineDomainName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTpmForUser_Result>("GetTpmForUser", machineNameParameter, machineDomainNameParameter, userNameParameter, userDomainNameParameter, reasonParameter);
        }
    
        public virtual ObjectResult<GetTpmForUserByKeyId_Result> GetTpmForUserByKeyId(string recoveryKeyId, string userName, string userDomainName, string reason)
        {
            var recoveryKeyIdParameter = recoveryKeyId != null ?
                new ObjectParameter("RecoveryKeyId", recoveryKeyId) :
                new ObjectParameter("RecoveryKeyId", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userDomainNameParameter = userDomainName != null ?
                new ObjectParameter("UserDomainName", userDomainName) :
                new ObjectParameter("UserDomainName", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTpmForUserByKeyId_Result>("GetTpmForUserByKeyId", recoveryKeyIdParameter, userNameParameter, userDomainNameParameter, reasonParameter);
        }
    
        public virtual int GetVolumeTypeId(string volumeGuid, ObjectParameter volumeTypeId)
        {
            var volumeGuidParameter = volumeGuid != null ?
                new ObjectParameter("VolumeGuid", volumeGuid) :
                new ObjectParameter("VolumeGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVolumeTypeId", volumeGuidParameter, volumeTypeId);
        }
    
        public virtual ObjectResult<GetVolumeUsers_Result> GetVolumeUsers(string volumeGuid)
        {
            var volumeGuidParameter = volumeGuid != null ?
                new ObjectParameter("VolumeGuid", volumeGuid) :
                new ObjectParameter("VolumeGuid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVolumeUsers_Result>("GetVolumeUsers", volumeGuidParameter);
        }
    }
}
